<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Architecture on ydsungan的博客</title>
        <link>http://ydsungan.com/categories/architecture/</link>
        <description>Recent content in Architecture on ydsungan的博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sat, 16 Apr 2022 16:07:12 +0800</lastBuildDate><atom:link href="http://ydsungan.com/categories/architecture/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Directory-based Protocol</title>
        <link>http://ydsungan.com/p/directory-based-protocol/</link>
        <pubDate>Sat, 16 Apr 2022 16:07:12 +0800</pubDate>
        
        <guid>http://ydsungan.com/p/directory-based-protocol/</guid>
        <description>&lt;img src="http://ydsungan.com/post/directory1.png" alt="Featured image of post Directory-based Protocol" /&gt;&lt;h2 id=&#34;snooping-based-protocol缺点&#34;&gt;Snooping-based Protocol缺点&lt;/h2&gt;
&lt;p&gt;如果有很多processor，那么总线共享，请求传播会带来总线争用，因为所有的processor都会把请求往总线上广播。这种策略适合processor较少的情况下。&lt;/p&gt;
&lt;h2 id=&#34;directory-based-protocol&#34;&gt;Directory-based Protocol&lt;/h2&gt;
&lt;p&gt;Directory-based 协议比 Snooping-based协议早产生。&lt;/p&gt;
&lt;p&gt;Directory-based 协议下，每个processor有自己的Cache、Memory、以及Directory。每一个processor可以进行点对点通信（就是直接通信），这里没有广播，没有共享的总线，没有总线争用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://ydsungan.com/post/directory2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;如上图所示：P1想要访问A，而A正在P3的Memory中，这时P1直接发生与P3的点对点通信，请求获取P3 Memory中的A。那么P3吧A的Copy发送给P1，P1存储在Cache中，而这时P3在自己的Directory中记下A的状态：Shared with P1。&lt;/p&gt;
&lt;p&gt;如果此时，P3也想要请求A，那么P3也会在自己的Directory中记下P3作为A的共享者。当P3想要修改A的时候，P3先检查自己的Directory，查看还有谁拥有A，它会向P1发送一条请求，让P1把Cache中的A无效（Invalidate）。而P1也会向P3发送一条确认请求，告诉P3自己已经把A无效化。这时候P3就可以放心修改A了，P3会现在自己的Directory中把 A:S_P1删除掉（因为P1中已经标记为Invalid）。&lt;/p&gt;
&lt;p&gt;当P3修改了A之后，P3将Directory中的A:S_P3修改为：A:M_P3，这个时候，P3可以使用write through和write back。&lt;/p&gt;
&lt;p&gt;然而，现在，P1中的A为无效状态，被认为是Cache Miss，称为 &lt;strong&gt;Coverage Miss&lt;/strong&gt;。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Snooping-based Protocol</title>
        <link>http://ydsungan.com/p/snooping-based-protocol/</link>
        <pubDate>Sat, 16 Apr 2022 15:15:12 +0800</pubDate>
        
        <guid>http://ydsungan.com/p/snooping-based-protocol/</guid>
        <description>&lt;h1 id=&#34;snooping-based-protocol&#34;&gt;Snooping-based Protocol&lt;/h1&gt;
&lt;p&gt;参考：https://www.youtube.com/watch?v=YNpaELJZm2c&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://ydsungan.com/post/snooping1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;如上图所示：有 4 个 processor，P1-P4，每个 processor 下面的方框表示私有的 Cache。此时，P1要读主存中的 A，而 P1 的 Cache（方框）为空，表示 Miss，所以它向共享的 Bus 发送一条请求，这个请求在 Bus 上广播出去，因为每个 processor 的 Cache都在监听着总线，所以每个 processor 的Cache都会知道和理解这个请求。由于其他的 processor （P2-P4）的Cache里面都没有A，所以其他的 processor 都忽略这个请求。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://ydsungan.com/post/snooping2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，P1的Cache已经把A从主存请求过来了，这时候的P1的Cache中的A为shared状态。现在，P3也要请求主存中的A，经过同样的向总线发送请求的过程，将 A 请求到 P3 的Cache中，如下图所示，A的状态也是 Shared状态。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://ydsungan.com/post/snooping3.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;现在，P1修改了A的值，将A修改为8，此时，P1的Cache的A的状态为Modified，【无图】&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;write invalidate 策略：当P1的Cache的A的状态修改为M后，会像总线发送一条 invalidation 信号让总线上的所有的processor都将他们自己cache内的A改为invalid状态。所以P3中的A的状态修改为 I （Invalid）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Write Through：马上把Cache中的A = 8写回主存，如下图所示。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write Back：会等到下一次Cache置换的时候才把A=8写回主存。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://ydsungan.com/post/snooping4.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;然而现在，P3的Cache中的A是一个无效值，认为这是一个Cache Miss，叫做 &lt;strong&gt;Coherence Miss&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;write update策略：不会像write invalidate策略那样向总线发送一条无效信号，而是发送一条更新信号，通知其他的processor去更新他们本地的Cache Copy。当所有其他的processor更新自己的cache中的A后，所有的Cache中的A的状态改为Shared，包括P1.
&lt;ul&gt;
&lt;li&gt;write through&lt;/li&gt;
&lt;li&gt;write back：均和上述相同&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前AMD和Intel的CPU都是采用的Snooping-based Protocol。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
