<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on ydsungan的博客</title>
        <link>http://ydsungan.com/post/</link>
        <description>Recent content in Posts on ydsungan的博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Mon, 04 Apr 2022 10:33:12 +0800</lastBuildDate><atom:link href="http://ydsungan.com/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>intel CPU 不同平台介绍</title>
        <link>http://ydsungan.com/p/intel-cpu-%E4%B8%8D%E5%90%8C%E5%B9%B3%E5%8F%B0%E4%BB%8B%E7%BB%8D/</link>
        <pubDate>Mon, 04 Apr 2022 10:33:12 +0800</pubDate>
        
        <guid>http://ydsungan.com/p/intel-cpu-%E4%B8%8D%E5%90%8C%E5%B9%B3%E5%8F%B0%E4%BB%8B%E7%BB%8D/</guid>
        <description>&lt;img src="http://ydsungan.com/post/intel_xe.jpg" alt="Featured image of post intel CPU 不同平台介绍" /&gt;&lt;h1 id=&#34;第三代至强可扩展处理器&#34;&gt;第三代至强可扩展处理器&lt;/h1&gt;
&lt;p&gt;编号的解释：&lt;em&gt;&lt;strong&gt;系列-家族-编号-架构代号-发行-光刻-售价美金&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;规格的解释：&lt;em&gt;&lt;strong&gt;内核数-线程数-基础频率-L3缓存-功耗&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;支持的解释：&lt;em&gt;&lt;strong&gt;内存通道数-是否支持超线程-是否支持傲腾DCPMM-是否支持TSX&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;编号&lt;/th&gt;
&lt;th&gt;规格&lt;/th&gt;
&lt;th&gt;支持&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;至强-金牌-5315Y-IceLake-21Q2-10-958&lt;/td&gt;
&lt;td&gt;8-16-3.2-12-140&lt;/td&gt;
&lt;td&gt;8-是-是-是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;至强-金牌-5320-IceLake-21Q2-10-1670&lt;/td&gt;
&lt;td&gt;26-52-2.2-39-185&lt;/td&gt;
&lt;td&gt;8-是-是-是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;至强-金牌-6330-IceLake-21Q2-10-2030&lt;/td&gt;
&lt;td&gt;28-56-2.0-42-205&lt;/td&gt;
&lt;td&gt;8-是-是-是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;至强-金牌-6348-IceLake-21Q2-10-3287&lt;/td&gt;
&lt;td&gt;28-56-2.6-42-235&lt;/td&gt;
&lt;td&gt;8-是-是-是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;至强-铂金-8358-IceLake-21Q2-10-4227&lt;/td&gt;
&lt;td&gt;32-64-2.6-48-250&lt;/td&gt;
&lt;td&gt;8-是-是-是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;至强-铂金-8360Y-IceLake-21Q2-10-5031&lt;/td&gt;
&lt;td&gt;36-72-2.4-54-250&lt;/td&gt;
&lt;td&gt;8-是-是-是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;至强-铂金-8368Q-IceLake-21Q2-10-7214&lt;/td&gt;
&lt;td&gt;38-76-2.6-57-270&lt;/td&gt;
&lt;td&gt;8-是-是-是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;至强-银牌-4316-IceLake-21Q2-10-1080&lt;/td&gt;
&lt;td&gt;20-40-2.3-30-150&lt;/td&gt;
&lt;td&gt;8-是-是-是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;至强-金牌-5318H-CooperLake-20Q2-14-1273&lt;/td&gt;
&lt;td&gt;18-36-2.5-24.75-150&lt;/td&gt;
&lt;td&gt;6-是-是-是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;至强-铂金-8376H-CooperLake-20Q2-14-8719&lt;/td&gt;
&lt;td&gt;28-56-2.6-38.5-205&lt;/td&gt;
&lt;td&gt;6-是-是-是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;至强-金牌-6330H-CooperLake-20Q3-14-1894&lt;/td&gt;
&lt;td&gt;24-48-2.0-33-150&lt;/td&gt;
&lt;td&gt;6-是-是-是&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;第二代至强可扩展处理器&#34;&gt;第二代至强可扩展处理器&lt;/h1&gt;
&lt;p&gt;编号的解释：&lt;em&gt;&lt;strong&gt;系列-家族-编号-架构代号-发行-光刻-售价美元&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;规格的解释：&lt;em&gt;&lt;strong&gt;内核数-线程数-基础频率-L3缓存-功耗&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;支持的解释：&lt;em&gt;&lt;strong&gt;内存通道数-是否支持超线程-是否支持傲腾DCPMM-是否支持TSX&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;编号&lt;/th&gt;
&lt;th&gt;规格&lt;/th&gt;
&lt;th&gt;支持&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;至强-金牌-3206R-CascadeLake-20Q1-14-330&lt;/td&gt;
&lt;td&gt;8-8-1.9-11-85&lt;/td&gt;
&lt;td&gt;6-否-否-是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;至强-金牌-5220R-CascadeLake-20Q1-14-1670&lt;/td&gt;
&lt;td&gt;24-48-2.2-35.75-150&lt;/td&gt;
&lt;td&gt;6-是-是-是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;至强-金牌-6256-CascadeLake-20Q1-14-4174&lt;/td&gt;
&lt;td&gt;12-24-3.6-33-205&lt;/td&gt;
&lt;td&gt;6-是-是-是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;至强-银牌-4214R-CascadeLake-20Q1-14-750&lt;/td&gt;
&lt;td&gt;12-24-2.4-16.5-100&lt;/td&gt;
&lt;td&gt;6-是-否-是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;至强-铂金-8270-CascadeLake-19Q2-14-7922&lt;/td&gt;
&lt;td&gt;26-52-2.7-35.75-205&lt;/td&gt;
&lt;td&gt;6-是-是-是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;至强-铂金-8280-CascadeLake-19Q2-14-10710&lt;/td&gt;
&lt;td&gt;28-56-2.7-38.5-205&lt;/td&gt;
&lt;td&gt;6-是-是-是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;至强-铂金-9242-CascadeLake-19Q2-14-?&lt;/td&gt;
&lt;td&gt;48-96-2.3-71.5-350&lt;/td&gt;
&lt;td&gt;12-是-?-是&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;第一代至强可扩展处理器&#34;&gt;第一代至强可扩展处理器&lt;/h1&gt;
&lt;p&gt;编号的解释：&lt;em&gt;&lt;strong&gt;系列-家族-编号-架构代号-发行-光刻-售价美元&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;规格的解释：&lt;em&gt;&lt;strong&gt;内核数-线程数-基础频率-L3缓存-功耗&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;支持的解释：&lt;em&gt;&lt;strong&gt;内存通道数-是否支持超线程-是否支持傲腾DCPMM-是否支持TSX&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;编号&lt;/th&gt;
&lt;th&gt;规格&lt;/th&gt;
&lt;th&gt;支持&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;至强-金牌-6138P-Skylake-18Q2-14-4937&lt;/td&gt;
&lt;td&gt;20-40-2.0-27.5-195&lt;/td&gt;
&lt;td&gt;6-是-否-是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;至强-铜牌-3104-Skylake-17Q3-14&lt;/td&gt;
&lt;td&gt;6-6-1.7-8.25-85&lt;/td&gt;
&lt;td&gt;6-否-否-是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;至强-金牌-6150-Skylake-17Q3-14-3358&lt;/td&gt;
&lt;td&gt;18-36-2.7-24.75-165&lt;/td&gt;
&lt;td&gt;6-是-否-是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;至强-铂金-8160T-Skylake-17Q3-14-4936&lt;/td&gt;
&lt;td&gt;24-48-2.1-33-150&lt;/td&gt;
&lt;td&gt;6-是-否-是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;至强-银牌-4110-Skylake-17Q3-14-505&lt;/td&gt;
&lt;td&gt;8-16-2.1-11-85&lt;/td&gt;
&lt;td&gt;6-是-否-是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;至强-银牌-4108-Skylake-17Q3-14-420&lt;/td&gt;
&lt;td&gt;8-16-1.8-11-85&lt;/td&gt;
&lt;td&gt;6-是-否-是&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;至强-e7-v4家族&#34;&gt;至强-E7-V4家族&lt;/h1&gt;
&lt;p&gt;编号的解释：&lt;em&gt;&lt;strong&gt;编号-架构代号-发行-光刻-售价美元&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;规格的解释：&lt;em&gt;&lt;strong&gt;内核数-线程数-基础频率-L3缓存-功耗&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;支持的解释：&lt;em&gt;&lt;strong&gt;内存通道数-是否支持超线程-是否支持傲腾DCPMM-是否支持TSX&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;编号&lt;/th&gt;
&lt;th&gt;规格&lt;/th&gt;
&lt;th&gt;支持&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;E7-8894V4-Broadwell-17Q1-14-8898&lt;/td&gt;
&lt;td&gt;24-28-2.4-60-165&lt;/td&gt;
&lt;td&gt;4-是-否-是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E7-4809V4-Broadwell-16Q2-14-1223&lt;/td&gt;
&lt;td&gt;8-16-2.1-20-115&lt;/td&gt;
&lt;td&gt;4-是-否-是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E7-8891V4-Broadwell-16Q2-14-6841&lt;/td&gt;
&lt;td&gt;10-20-2.8-60-165&lt;/td&gt;
&lt;td&gt;4-是-否-是&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;至强-e7-v3家族&#34;&gt;至强-E7-V3家族&lt;/h1&gt;
&lt;p&gt;编号的解释：&lt;em&gt;&lt;strong&gt;编号-架构代号-发行-光刻-售价美元&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;规格的解释：&lt;em&gt;&lt;strong&gt;内核数-线程数-基础频率-L3缓存-功耗&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;支持的解释：&lt;em&gt;&lt;strong&gt;内存通道数-是否支持超线程-是否支持傲腾DCPMM-是否支持TSX&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;编号&lt;/th&gt;
&lt;th&gt;规格&lt;/th&gt;
&lt;th&gt;支持&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;E7-4809V3-Haswell-15Q2-22-1223&lt;/td&gt;
&lt;td&gt;8-16-2.0-20-115&lt;/td&gt;
&lt;td&gt;4-是-否-是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E7-8890V3-Haswell-15Q2-22-7174&lt;/td&gt;
&lt;td&gt;18-36-2.5-45-165&lt;/td&gt;
&lt;td&gt;4-是-否-是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E7-8867V3-Haswell-15Q2-22-4672&lt;/td&gt;
&lt;td&gt;16-32-2.5-45-165&lt;/td&gt;
&lt;td&gt;4-是-否-是&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;至强-e7-v2家族&#34;&gt;至强-E7-V2家族&lt;/h1&gt;
&lt;p&gt;编号的解释：&lt;em&gt;&lt;strong&gt;编号-架构代号-发行-光刻-售价美元&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;规格的解释：&lt;em&gt;&lt;strong&gt;内核数-线程数-基础频率-L3缓存-功耗&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;支持的解释：&lt;em&gt;&lt;strong&gt;内存通道数-是否支持超线程-是否支持傲腾DCPMM-是否支持TSX&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;编号&lt;/th&gt;
&lt;th&gt;规格&lt;/th&gt;
&lt;th&gt;支持&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;E7-2850V2-Ivy Bridge-14Q1-22-?&lt;/td&gt;
&lt;td&gt;12-24-2.3-24-105&lt;/td&gt;
&lt;td&gt;4-是-否-否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E7-4830V2-Ivy Bridge-14Q1-22-2059&lt;/td&gt;
&lt;td&gt;10-20-2.2-20-105&lt;/td&gt;
&lt;td&gt;4-是-否-否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E7-4890V2-Ivy Bridge-14Q1-22-6619&lt;/td&gt;
&lt;td&gt;15-30-2.8-37.5-155&lt;/td&gt;
&lt;td&gt;4-是-否-否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;至强-e5-v4家族&#34;&gt;至强-E5-V4家族&lt;/h1&gt;
&lt;p&gt;编号的解释：&lt;em&gt;&lt;strong&gt;编号-架构代号-发行-光刻-售价美元&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;规格的解释：&lt;em&gt;&lt;strong&gt;内核数-线程数-基础频率-L3缓存-功耗&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;支持的解释：&lt;em&gt;&lt;strong&gt;内存通道数-是否支持超线程-是否支持傲腾DCPMM-是否支持TSX&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;编号&lt;/th&gt;
&lt;th&gt;规格&lt;/th&gt;
&lt;th&gt;支持&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;E5-2683V4-Broadwell-16Q1-14-1846&lt;/td&gt;
&lt;td&gt;16-32-2.1-40-120&lt;/td&gt;
&lt;td&gt;4-是-否-是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E5-2699AV4-Broadwell-16Q2-14-4938&lt;/td&gt;
&lt;td&gt;22-44-2.4-55-145&lt;/td&gt;
&lt;td&gt;4-是-否-是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E5-4610V4-Broadwell-16Q2-14-1219&lt;/td&gt;
&lt;td&gt;10-20-1.8-25-105&lt;/td&gt;
&lt;td&gt;4-是-否-是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E5-1650V4-Broadwell-16Q2-14-621&lt;/td&gt;
&lt;td&gt;6-12-3.6-15-140&lt;/td&gt;
&lt;td&gt;4-是-否-是&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;至强-e5-v1家族&#34;&gt;至强-E5-V1家族&lt;/h1&gt;
&lt;p&gt;编号的解释：&lt;em&gt;&lt;strong&gt;编号-架构代号-发行-光刻-售价美元&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;规格的解释：&lt;em&gt;&lt;strong&gt;内核数-线程数-基础频率-L3缓存-功耗&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;支持的解释：&lt;em&gt;&lt;strong&gt;内存通道数-是否支持超线程-是否支持傲腾DCPMM-是否支持TSX&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;编号&lt;/th&gt;
&lt;th&gt;规格&lt;/th&gt;
&lt;th&gt;支持&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;E5-1428L-Sandy Bridge EN-12Q2-32-480&lt;/td&gt;
&lt;td&gt;6-12-1.8-15-60&lt;/td&gt;
&lt;td&gt;4-是-否-否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E5-4610-Sandy Bridge EN-12Q2-32-1220&lt;/td&gt;
&lt;td&gt;6-12-2.4-15-95&lt;/td&gt;
&lt;td&gt;4-是-否-否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E5-1660-Sandy Bridge EN-12Q2-32-1080&lt;/td&gt;
&lt;td&gt;6-12-3.3-15-130&lt;/td&gt;
&lt;td&gt;4-是-否-否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;至强-e3-v6家族&#34;&gt;至强-E3-V6家族&lt;/h1&gt;
&lt;p&gt;编号的解释：&lt;em&gt;&lt;strong&gt;编号-架构代号-发行-光刻-售价美元&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;规格的解释：&lt;em&gt;&lt;strong&gt;内核数-线程数-基础频率-L3缓存-功耗&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;支持的解释：&lt;em&gt;&lt;strong&gt;内存通道数-是否支持超线程-是否支持傲腾DCPMM-是否支持TSX&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;编号&lt;/th&gt;
&lt;th&gt;规格&lt;/th&gt;
&lt;th&gt;支持&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;E3-1285V6-Kaby Lake-17Q3-14-450&lt;/td&gt;
&lt;td&gt;4-8-4.1-8-79&lt;/td&gt;
&lt;td&gt;2-是-否-是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E3-1245V6-Kaby Lake-17Q1-14-290&lt;/td&gt;
&lt;td&gt;4-8-3.7-8-73&lt;/td&gt;
&lt;td&gt;2-是-否-是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E3-1505MV6-Kaby Lake-17Q1-14-434&lt;/td&gt;
&lt;td&gt;4-8-3.0-8-45&lt;/td&gt;
&lt;td&gt;2-是-否-是&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;至强-w-处理器&#34;&gt;至强 W 处理器&lt;/h1&gt;
&lt;p&gt;编号的解释：&lt;em&gt;&lt;strong&gt;编号-架构代号-发行-光刻-售价美元&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;规格的解释：&lt;em&gt;&lt;strong&gt;内核数-线程数-基础频率-L3缓存-功耗&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;支持的解释：&lt;em&gt;&lt;strong&gt;内存通道数-是否支持超线程-是否支持傲腾DCPMM-是否支持TSX&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;编号&lt;/th&gt;
&lt;th&gt;规格&lt;/th&gt;
&lt;th&gt;支持&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;W-11155MLE-Tiger Lake-21Q3-10-242&lt;/td&gt;
&lt;td&gt;4-8-1.8-8-25&lt;/td&gt;
&lt;td&gt;2-是-否-否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;W-11865MLE-Tiger Lake-21Q3-10-467&lt;/td&gt;
&lt;td&gt;8-16-1.5-24-25&lt;/td&gt;
&lt;td&gt;2-是-否-否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;W-3365-Ice Lake-21Q3-10-3499&lt;/td&gt;
&lt;td&gt;32-64-2.7-48-270&lt;/td&gt;
&lt;td&gt;8-是-否-是&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;至强-d-处理器&#34;&gt;至强 D 处理器&lt;/h1&gt;
&lt;p&gt;编号的解释：&lt;em&gt;&lt;strong&gt;编号-架构代号-发行-光刻-售价美元&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;规格的解释：&lt;em&gt;&lt;strong&gt;内核数-线程数-基础频率-L3缓存-功耗&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;支持的解释：&lt;em&gt;&lt;strong&gt;最大内存大小-是否支持超线程-是否支持傲腾DCPMM-是否支持TSX&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;编号&lt;/th&gt;
&lt;th&gt;规格&lt;/th&gt;
&lt;th&gt;支持&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;D-1712TR-Ice Lake-22Q1-10-240&lt;/td&gt;
&lt;td&gt;4-8-2.0-10-40&lt;/td&gt;
&lt;td&gt;384-是-否-否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D-1718T-Ice Lake-22Q1-10-274&lt;/td&gt;
&lt;td&gt;4-8-2.6-10-46&lt;/td&gt;
&lt;td&gt;256-是-否-否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D-1747NTE-Ice Lake-22Q1-10-1201&lt;/td&gt;
&lt;td&gt;10-20-2.5-15-80&lt;/td&gt;
&lt;td&gt;384-是-否-否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;酷睿-i7-第12代-处理器&#34;&gt;酷睿 i7 第12代 处理器&lt;/h1&gt;
&lt;p&gt;编号的解释：&lt;em&gt;&lt;strong&gt;编号-市场-架构代号-发行-光刻-售价美元&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;规格的解释：&lt;em&gt;&lt;strong&gt;内核数-线程数-最大睿频-L3缓存-基础功耗&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;支持的解释：&lt;em&gt;&lt;strong&gt;最大内存-内存通道-是否支持TSX-最大DP-最大HDMI-核显&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;市场的Mobile表示适用于笔记本，Desktop表示适用于台式机。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;编号&lt;/th&gt;
&lt;th&gt;规格&lt;/th&gt;
&lt;th&gt;支持&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;i7-12700-Desktop-Alder Lake-22Q1-7-340&lt;/td&gt;
&lt;td&gt;12-20-4.9-25-65&lt;/td&gt;
&lt;td&gt;128-2-否-8K60帧-4K60帧-770&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i7-12650H-Mobile-Alder Lake-22Q1-7-457&lt;/td&gt;
&lt;td&gt;10-16-4.7-24-45&lt;/td&gt;
&lt;td&gt;64-2-否-8K60帧-4K60帧-?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i7-12800H-Mobile-Alder Lake-22Q1-7-457&lt;/td&gt;
&lt;td&gt;14-20-4.8-24-45&lt;/td&gt;
&lt;td&gt;64-2-否-8K60帧-4K60帧-锐炬Xe&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;酷睿-i5-第12代-处理器&#34;&gt;酷睿 i5 第12代 处理器&lt;/h1&gt;
&lt;p&gt;编号的解释：&lt;em&gt;&lt;strong&gt;编号-市场-架构代号-发行-光刻-售价美元&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;规格的解释：&lt;em&gt;&lt;strong&gt;内核数-线程数-最大睿频-L3缓存-基础功耗&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;支持的解释：&lt;em&gt;&lt;strong&gt;最大内存-内存通道-是否支持TSX-最大DP-最大HDMI-核显&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;市场的Mobile表示适用于笔记本，Desktop表示适用于台式机。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;编号&lt;/th&gt;
&lt;th&gt;规格&lt;/th&gt;
&lt;th&gt;支持&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;i5-1230U-Mobile-Alder Lake-22Q1-7-?&lt;/td&gt;
&lt;td&gt;10-12-4.4-12-9&lt;/td&gt;
&lt;td&gt;64-2-否-8K60帧-4K60帧-锐炬Xe&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i5-1245U-Mobile-Alder Lake-22Q1-7-309&lt;/td&gt;
&lt;td&gt;10-12-4.4-12-15&lt;/td&gt;
&lt;td&gt;64-2-否-8K60帧-4K60帧-锐炬Xe&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i5-12400-Desktop-Alder Lake-22Q1-7-199&lt;/td&gt;
&lt;td&gt;6-12-4.4-18-65&lt;/td&gt;
&lt;td&gt;128-2-否-8K60帧-4K60帧-730&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i5-12600-Desktop-Alder Lake-22Q1-7-230&lt;/td&gt;
&lt;td&gt;6-12-4.8-18-65&lt;/td&gt;
&lt;td&gt;128-2-否-8K60帧-4K60帧-770&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i5-12600H-Mobile-Alder Lake-22Q1-7-311&lt;/td&gt;
&lt;td&gt;12-16-4.5-18-45&lt;/td&gt;
&lt;td&gt;64-2-否-8K60帧-4K60帧-锐炬Xe&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;酷睿-i5-第11代-处理器&#34;&gt;酷睿 i5 第11代 处理器&lt;/h1&gt;
&lt;p&gt;编号的解释：&lt;em&gt;&lt;strong&gt;编号-市场-架构代号-发行-光刻-售价美元&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;规格的解释：&lt;em&gt;&lt;strong&gt;内核数-线程数-最大睿频-L3缓存-基础功耗&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;支持的解释：&lt;em&gt;&lt;strong&gt;最大内存-内存通道-是否支持TSX-最大DP-最大HDMI-核显&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;市场的Mobile表示适用于笔记本，Desktop表示适用于台式机。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;编号&lt;/th&gt;
&lt;th&gt;规格&lt;/th&gt;
&lt;th&gt;支持&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;i5-11300H-Mobile-Tiger Lake-21Q1-10-309&lt;/td&gt;
&lt;td&gt;4-8-4.4-8-28&lt;/td&gt;
&lt;td&gt;64-2-否-8K60帧-4K60帧-锐炬Xe&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i5-1135G7-Mobile-Tiger Lake-20Q3-10-309&lt;/td&gt;
&lt;td&gt;4-8-4.2-8-12&lt;/td&gt;
&lt;td&gt;64-2-否-8K60帧-4K60帧-锐炬Xe&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i5-1145G7-Mobile-Tiger Lake-21Q1-10-309&lt;/td&gt;
&lt;td&gt;4-8-4.4-8-12&lt;/td&gt;
&lt;td&gt;64-2-否-8K60帧-4K60帧-锐炬Xe&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i5-1155G7-Mobile-Tiger Lake-21Q2-10-309&lt;/td&gt;
&lt;td&gt;4-8-4.5-8-12&lt;/td&gt;
&lt;td&gt;64-2-否-8K60帧-4K60帧-锐炬Xe&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i5-11400-Desktop-Rocket Lake-21Q1-14-182&lt;/td&gt;
&lt;td&gt;6-12-4.4-12-65&lt;/td&gt;
&lt;td&gt;128-2-否-5K60帧-4K60帧-730&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i5-1145G7-Mobile-Tiger Lake-21Q2-10-309&lt;/td&gt;
&lt;td&gt;4-8-4.4-8-12&lt;/td&gt;
&lt;td&gt;64-2-否-8K60帧-4K60帧-锐炬Xe&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i5-11600K-Desktop-Rocket Lake-21Q1-14-270&lt;/td&gt;
&lt;td&gt;6-12-4.9-12-125&lt;/td&gt;
&lt;td&gt;128-2-否-5K60帧-4K60帧-750&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;酷睿-i5-第10代-处理器&#34;&gt;酷睿 i5 第10代 处理器&lt;/h1&gt;
&lt;p&gt;编号的解释：&lt;em&gt;&lt;strong&gt;编号-市场-架构代号-发行-光刻-售价美元&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;规格的解释：&lt;em&gt;&lt;strong&gt;内核数-线程数-最大睿频-L3缓存-基础功耗&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;支持的解释：&lt;em&gt;&lt;strong&gt;最大内存-内存通道-是否支持TSX-最大DP-最大HDMI-核显&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;市场的Mobile表示适用于笔记本，Desktop表示适用于台式机。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;编号&lt;/th&gt;
&lt;th&gt;规格&lt;/th&gt;
&lt;th&gt;支持&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;i5-10500H-Mobile-Comet Lake-20Q4-14-250&lt;/td&gt;
&lt;td&gt;6-12-4.5-12-45&lt;/td&gt;
&lt;td&gt;128-2-否-4K60帧-4K30帧-?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i5-10210U-Mobile-Comet Lake-19Q3-14-297&lt;/td&gt;
&lt;td&gt;4-8-4.2-6-15&lt;/td&gt;
&lt;td&gt;64-2-否-4K60帧-4K30帧-?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i5-10310U-Mobile-Comet Lake-20Q2-14-297&lt;/td&gt;
&lt;td&gt;4-8-4.4-6-15&lt;/td&gt;
&lt;td&gt;64-2-否-4K60帧-4K24帧-?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i5-10400F-Desktop-Comet Lake-20Q2-14-157&lt;/td&gt;
&lt;td&gt;6-12-4.3-12-65&lt;/td&gt;
&lt;td&gt;128-2-否-无核显-无核显-无核显&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;奔腾金牌处理器&#34;&gt;奔腾金牌处理器&lt;/h1&gt;
&lt;p&gt;编号的解释：&lt;em&gt;&lt;strong&gt;编号-市场-架构代号-发行-光刻-售价美元&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;规格的解释：&lt;em&gt;&lt;strong&gt;内核数-线程数-最大睿频-L3缓存-基础功耗&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;支持的解释：&lt;em&gt;&lt;strong&gt;最大内存-内存通道-是否支持TSX-最大DP-最大HDMI-核显&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;市场的Mobile表示适用于笔记本，Desktop表示适用于台式机。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;编号&lt;/th&gt;
&lt;th&gt;规格&lt;/th&gt;
&lt;th&gt;支持&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;G7400-Desktop-Alder Lake-22Q1-7-70&lt;/td&gt;
&lt;td&gt;2-4-3.7-6-46&lt;/td&gt;
&lt;td&gt;128-2-否-8K60帧-4K60帧-710&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;G6405-Desktop-Comet Lake-21Q1-14-64&lt;/td&gt;
&lt;td&gt;2-4-4.1-4-58&lt;/td&gt;
&lt;td&gt;128-2-否-4K60帧-4K30帧-610&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6500Y-Mobile-Amber Lake Y-21Q1-14-?&lt;/td&gt;
&lt;td&gt;2-4-1.1-4-5&lt;/td&gt;
&lt;td&gt;16-2-否-3K60帧-4K24帧-615&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4425Y-Mobile-Amber Lake-19Q1-14-161&lt;/td&gt;
&lt;td&gt;2-4-1.7-2-6&lt;/td&gt;
&lt;td&gt;16-2-否-4K60帧-4K24帧-615&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
        </item>
        <item>
        <title>NVM方向调研</title>
        <link>http://ydsungan.com/p/nvm%E6%96%B9%E5%90%91%E8%B0%83%E7%A0%94/</link>
        <pubDate>Thu, 31 Mar 2022 18:25:12 +0800</pubDate>
        
        <guid>http://ydsungan.com/p/nvm%E6%96%B9%E5%90%91%E8%B0%83%E7%A0%94/</guid>
        <description>&lt;img src="http://ydsungan.com/post/dcpmm.jpg" alt="Featured image of post NVM方向调研" /&gt;&lt;h1 id=&#34;研究方向&#34;&gt;研究方向&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;文件系统&lt;/li&gt;
&lt;li&gt;键值存储系统&lt;/li&gt;
&lt;li&gt;索引结构&lt;/li&gt;
&lt;li&gt;数据一致性&lt;/li&gt;
&lt;li&gt;磨损均衡&lt;/li&gt;
&lt;li&gt;动态图&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;傲腾pmem特性&#34;&gt;傲腾PMem特性&lt;/h1&gt;
&lt;h2 id=&#34;pmem架构&#34;&gt;PMem架构&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;每个 CPU 芯片有2个 iMC，每个 iMC 支持3个通道，所以每个 CPU 芯片支持6个傲腾DIMM。一台双 CPU 的服务器最大可装载 6TB (2 socket * 6 channel * 512GB/DIMM = 6TB)。&lt;/li&gt;
&lt;li&gt;使用 ADR 域来掉电保护；CPU中的 iMC 中为每个傲腾 DIMM 维护着读/写挂起队列，WPQ 在ADR 域中，只要数据达到 WPQ 中，ADR域即可确保在掉电后 iMC 把数据刷回 DIMM；Cache中的数据无法保护，ADR域中的 WPQ 和 XPBuffer 中的数据可以被持久化。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;pmem运行模式&#34;&gt;PMem运行模式&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;内存模式&lt;/strong&gt;：DCPMM为易失性，一个DCPMM和一个DRAM组合在同一个内存通道上，DRAM 相当于一个 L4 级缓存，缓存块为 64B， DCPMM被视为主存。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;直连模式&lt;/strong&gt;： DCPMM提供持久性，可以使用交错和非交错配置；交错的DCPMM被视为一个整体空间，将数据等量分散存储到各个DIMM，交错大小为4KB，类似RAID 0；非交错的DCPMM将一个 DIMM的内存空间追加到另一个DIMM的后面。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;pmem读写&#34;&gt;PMem读写&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;iMC 与傲腾 PMem 之间通过基于事物的双倍速率协议 (DDR-T) 以缓存行大小 (64B) 的粒度进行传输。&lt;/li&gt;
&lt;li&gt;傲腾 PMem 内部的最小读写粒度为 256B，内部用一个小的写合并缓冲区 XPBuffer 来解决 DDR-T协议传输粒度和傲腾 PMem 的操作粒度不一致的问题。例如，64 B的数据写操作需要先从傲腾 PMem中将对应的256 B数据读入到 XPBuffer 中，然后在 XPBuffer 中更新请求的64 B数据，最后再将256 B数据写入到傲腾PMem存储介质中。这一操作会导致写放大，降低傲腾PMM的性能。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;延时测试&#34;&gt;延时测试&lt;/h2&gt;
&lt;p&gt;傲腾 PMem 内部的最小读写粒度为 256B，内部用一个小的写合并缓冲区 XPBuffer 来解决 DDR-T协议传输粒度和傲腾 PMem 的操作粒度不一致的问题。例如，64 B的数据写操作需要先从傲腾 PMem中将对应的256 B数据读入到 XPBuffer 中，然后在 XPBuffer 中更新请求的64 B数据，最后再将256 B数据写入到傲腾PMem存储介质中。这一操作会导致写放大，降低傲腾PMM的性能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://ydsungan.com/post/timetest1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;延时测试&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;访问粒度对带宽的影响&#34;&gt;访问粒度对带宽的影响&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;DRAM：访问粒度的大小对读写带宽没什么影响；&lt;/li&gt;
&lt;li&gt;交错和非交错：访问粒度小于 256B时会造成较差的带宽，原因是 XPLine大小为 256B；&lt;/li&gt;
&lt;li&gt;非交错：读写带宽较非交错提升 5.8x 和 5.6x (与交错的DIMM个数接近)，在 4KB 处带宽降低，接近交错大小，最大化 iMC 竞争；尽量避免以4KB的交错大小进行随机访问；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://ydsungan.com/post/bandwidth1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;带宽测试&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;文件系统&#34;&gt;文件系统&lt;/h1&gt;
&lt;h2 id=&#34;传统块设备文件系统-vs-持久内存文件系统&#34;&gt;传统块设备文件系统 vs 持久内存文件系统&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;基于块设备的文件系统：读写粒度通常为 512B 或 4KB，如文件系统需要修改块设备中的 8B 时，需要找到这 8B 所在的块号，将其所在的 4KB 块读取到内存中的 page cache中，再拷贝到应用缓冲区，在应用缓冲区中修改这 8B ，并将修改后的缓存页写回到块设备，是一个“读取-修改-写回”的过程，存在双份拷贝花销的问题、写放大问题、块设备访问速度慢导致大量的访问操作会带来 I/O 阻塞问题。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;读缓存&lt;/strong&gt;：文件访问具有时间局部性，从块设备读取了一个文件的数据后，可以让它在内存中保存一段时间，命中时可直接访问；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;写缓冲区和写合并&lt;/strong&gt;：文件访问具有空间局部性，文件在高速缓存页中修改之后，不马上持久化，若后续再次请求修改相同的块时，可直接修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基于持久内存的文件系统：NVM 设备直接连接在 DDR 内存通道，移除了页高速缓存和块设备的写入缓冲区和写入合并；具有可按字节寻址的特性，数据直接在文件系统和应用缓冲区之间通过 Load/Store 访存，无需以整个块粒度读写；&lt;/li&gt;
&lt;li&gt;持久内存文件系统的优点
&lt;ul&gt;
&lt;li&gt;访问文件数据不需要经过传统面向块设备的 I/O 软件层次，文件请求到内存级就直接返回;&lt;/li&gt;
&lt;li&gt;访问文件数据不需要多次拷贝，不需要经过 VFS 中的高速缓存，因为PM是直接装在内存总线上，直接在内存与用户进程缓冲区之间直接拷贝数据；&lt;/li&gt;
&lt;li&gt;访问NVM通常不会引起进程阻塞挂起。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://ydsungan.com/post/pm1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;持久内存文件系统架构&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;文件系统的结构特征&#34;&gt;文件系统的结构特征&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;索引结构：树形索引 vs 哈希索引 vs 跳表&lt;/li&gt;
&lt;li&gt;内存架构：纯NVM vs DRAM-NVM混合内存&lt;/li&gt;
&lt;li&gt;数据更新机制：日志型更新 vs 写时复制&lt;/li&gt;
&lt;li&gt;是否支持 MMap：是 vs 否&lt;/li&gt;
&lt;li&gt;访问均衡性：弱 vs 强&lt;/li&gt;
&lt;li&gt;一致性层级：元数据一致性 vs 数据一致性 vs 版本一致性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://ydsungan.com/post/fs.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;现有的研究工作&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;数据更新机制&#34;&gt;数据更新机制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;日志&lt;/strong&gt;：一种原地更新的方式，是指新数据在旧数据所在的位置上进行更新，新写入的数据将覆盖原有数据，对于可能存在的不完整写问题，一般采取记录日志 (Journaling) 的方式对被修改前的数据和被修改后的数据进行记录，更新完全成功后再丢弃日志。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;写时复制&lt;/strong&gt;：一种异地更新方式，写时复制是指当进行数据更新时，先将原有数据原原本本地复制一份，然后在复制出的副本上进行数据修改，数据修改完成后再将数据原本删除，若修改失败，则将数据恢复到原本状态，这样就即可以完成数据更新，又保证了数据更新的一致性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;nvm-dram-混合内存文件系统&#34;&gt;NVM-DRAM 混合内存文件系统&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;DRAM 和 NVM 采用平行架构，DRAM 和 NVM 同时作为系统主存连接在内存控制器上，俩者采用统一编址的方式；&lt;/li&gt;
&lt;li&gt;关键的变化是如何确定 DRAM 和 NVM 各自存放程序的哪些数据，当系统发生异常时DRAM掉电易失，而 NVM 中的数据在 DRAM 中的数据已然丢失的情况下，如何维护数据一致性；&lt;/li&gt;
&lt;li&gt;对应为 Intel 傲腾持久内存的 App-Direct Mode，系统可用的总内存空间为DRAM和NVM容量之和。被更多的研究采用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://ydsungan.com/post/h1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;混合内存架构&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;键值存储系统&#34;&gt;键值存储系统&lt;/h1&gt;
&lt;h2 id=&#34;非关系型数据库&#34;&gt;非关系型数据库&lt;/h2&gt;
&lt;p&gt;主要可以分为四种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;键值对存储&lt;/strong&gt; (Key-Value Store)：其基本结构就是一个 Key-Value 的映射关系集合；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文档存储&lt;/strong&gt; (Document Store)：如MongoDB；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;列数据库&lt;/strong&gt; (Column-oriented Store)：将每一列分别单独存放数据。与基于行的传统关系型数据库的区别在于：以牺牲存储空间和更多的索引文件为代价使得查找速度得到提升，主要适用于批量数据处理和即时查询，而数据以行相关的存储体系架构，主要适合于大规模的数据处理和联机事务型数据处理；如Cassandra、HBase；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;图数据库&lt;/strong&gt; (Graph Database)：又分为静态图和动态图。适用于被存储的数据之间具有较为紧密的联系，图形数据库主要由两部分组成，节点和连接边，节点表示实体本身，连接边表示实体之间的关系。如静态图数据库Neo4J、动态图数据库Stinger。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;k-v-store&#34;&gt;K-V store&lt;/h2&gt;
&lt;p&gt;键值对存储系统主要采用的数据结构：LSM树、B+树、哈希表、跳表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LSM树&lt;/strong&gt;：LSM 树多用于 HDD 或 SSD 的键值对存储系统，在内存中将随机写请求聚集并顺序写到外存中，适应HDD 或 SSD的顺序写性能远远高于随机写性能的特性；LSM 树主要应用于查询频率远远低于写入频率的情况，能降低索引的写入开销。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;哈希表&lt;/strong&gt;：主要被用在基于内存的场景中，利用了哈希表常数级别的点操作时间复杂度，包括Add、Get、Update、Delete等操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;索引结构&#34;&gt;索引结构&lt;/h1&gt;
&lt;h2 id=&#34;树型索引&#34;&gt;树型索引&lt;/h2&gt;
&lt;p&gt;一般B+树、基数树，为有序索引数据结构，范围查询的性能最好，但需要额外的开销来维护有序性。Add、Get、Update、Delete、Scan等操作的时间复杂度都为O(logN)。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://ydsungan.com/post/tree.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;现有研究工作&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;哈希索引结构&#34;&gt;哈希索引结构&lt;/h2&gt;
&lt;p&gt;哈希表完全不维护数据结构中的有序性，一般而言额外开销最小，范围查询时需要遍历所有的键值对，效率很低。不过Add、Get、Update、Delete等点操作类型的时间复杂度都是O(1)，性能优于树形索引结构。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;静态哈希&lt;/strong&gt;：适合数据集大小相对稳定的场景，在插入频繁的场景下，数据的波动较大，静态哈希要重建哈希索引进行扩容，导致大量的NVM写操作，造成性能的抖动和下降，且在并发时要对扩容的哈希索引加锁，导致索引的访问被阻塞。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态哈希&lt;/strong&gt;：包括可扩展哈希、线性哈希；动态哈希通过桶分裂来增量式扩容，扩容过程不需要重建整个哈希索引，而且不需要加锁，平衡了可扩展性和性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;布谷鸟散列&#34;&gt;布谷鸟散列&lt;/h3&gt;
&lt;p&gt;布谷鸟散列：使用俩个哈希函数分别计算 key对应的位置：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;若两个位置均为空，任选一个插入；&lt;/li&gt;
&lt;li&gt;若两个位置中一个为空，插入到空的位置；&lt;/li&gt;
&lt;li&gt;若两个位置均非空，则随机踢出一个位置上的 keyx，被踢出的 keyx 再执行该算法找其另一个位置，循环直到插入成功；&lt;/li&gt;
&lt;li&gt;如果被踢出的次数达到一定的阈值，则认为hash表已满，并进行重新哈希 rehashing。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;http://ydsungan.com/post/hash.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;现有工作研究&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;数据一致性&#34;&gt;数据一致性&lt;/h1&gt;
&lt;h2 id=&#34;数据的崩溃一致性问题&#34;&gt;数据的崩溃一致性问题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;写粒度问题&lt;/strong&gt;：CPU对SSD原子写的粒度为闪存页大小4KB ，对HDD原子写的粒度为扇区大小512B，可以保证一条日志的追加更新是原子性的。而CPU对NVM的原子写粒度只有8B，面临修改持久性数据的过程中发生断电导致数据不一致的问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓存问题&lt;/strong&gt;：传统DRAM和Cache都是易失的，系统在DRAM和Cache之间采用写回法和写分配法的策略不会产生断电恢复的问题。而NVM作为全部内存时，CPU先写入Cache中，没有写入NVM中。这样指令运行结束之后，我们无法判断数据何时才会真正被持久化存储，在断电后无法判断数据出于何种状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CPU重排序问题&lt;/strong&gt;：对于多周期流水线CPU，在一个基本时钟周期内同时从指令Cache中读出多条指令，同时对多条指令进行译码。当指令没有数据相关性时且有空闲运算部件时就会被执行，不能保证各个语句执行的先后顺序和输入代码中的顺序一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;原子更新技术sfenceclflush&#34;&gt;原子更新技术：sfence、clflush&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;内存屏障&lt;/strong&gt;：CPU 采用乱序调度来增加性能，但 NVM 的写入要保证顺序性否则会导致崩溃一致性的问题，内存屏障的方式如 sfence 指令，可以保证 cache line 刷回NVM 的顺序。但加入 sfence 等内存屏障指令降低 CPU 流水线效率会降低处理器性能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缓存行刷新&lt;/strong&gt;：x86 提供了 clflush、clflushopt 和 clwb 等指令可以让数据在每次对NVM的写入操作之后从 cache line 强制写回到 NVM。但这些指令减少了Cache作为高速缓存的作用，降低了处理器性能。clwb 指令后跟着 sfence 指令为一次持久化操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://ydsungan.com/post/flush1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;fl&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://ydsungan.com/post/flush2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;fl&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;日志&#34;&gt;日志&lt;/h2&gt;
&lt;p&gt;redo日志、undo日志：或叫做写前日志，是一种原地更新设计。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;undo日志：原始值被修改之前，将原始值存储到undo日志中，如果修改出现异常，可以对undo日志进行回滚；&lt;/li&gt;
&lt;li&gt;redo日志：将数据位置和此位置上即将被写入的新数据保存在日志中，日志提交之后用户进行真正的修改，在恢复的时候根据这个日志把数据重写到记录的位置上。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;redo 日志一旦提交，就认为已成功持久化，无论修改是否已经写到原位置上；
undo 日志使用时，数据修改的持久化取决于日志是否被标记为无效。只有真实的修改被写到原位置上，用户再将 undo 日志标记为无效，才能保证完成持久化。&lt;/p&gt;
&lt;h2 id=&#34;写时拷贝&#34;&gt;写时拷贝&lt;/h2&gt;
&lt;p&gt;写时拷贝：修改数据时，先对原数据进行一次拷贝，在拷贝出来的数据副本上进行修改。此后，写时拷贝通过继续修改指向原数据的指针，使其指向新数据，让副本中的数据修改生效。写时拷贝经常被用在树形结构中。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>内存管理</title>
        <link>http://ydsungan.com/p/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
        <pubDate>Wed, 30 Mar 2022 14:47:12 +0800</pubDate>
        
        <guid>http://ydsungan.com/p/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
        <description>&lt;h1 id=&#34;1-虚拟内存&#34;&gt;1 虚拟内存&lt;/h1&gt;
&lt;p&gt;​		内存是计算机系统的重要计算资源。在介绍具体的内存管理机制之前，先思考这个问题：当多个应用程序同时运行时，操作系统该如何让它们共同使用物理内存资源呢?&lt;/p&gt;
&lt;p&gt;​		一种简单的方法是：当一个应用程序 A 运行时，允许它访问所有的物理内存资源；在切换到另一个应用程序 B 运行的过程中，操作系统将应用程序 A 的所有内存数据保存到存储设备（如磁盘）中，然后将应用程序 B 的数据从存储设备加载到内存中。但是这种方法存在明显的弊端：由于读写存储设备的速度很慢，这将导致切换程序的时间开销太大。&lt;/p&gt;
&lt;p&gt;​		另—种简单的方法是：让每个应用程序独立使用物理内存的—部分，数据—直驻留在内存中，在程序切换时不再需要操作存储设备。该方法在性能方面优于前一种方法，但是也存在两个严重的弊端：第—，无法保证不同应用程序所使用的物理内存之间的隔离性，比如应用程序 A 在运行过程中可能意外地写了应用程序B的物理内存，进而导致后者错误运行；第二，无法保证应用程序可用的地址空间是连续的和统一的，增加了程序编写及编译的复杂性。&lt;/p&gt;
&lt;p&gt;​		操作系统究竟是如何让不同的应用程序能够既高效又安全地共同使用物理内存资源的？现代操作系统的一个普遍做法是在应用程序与物理内存之间加入一个新的抽象：&lt;strong&gt;虚拟内存&lt;/strong&gt;（virtual memory）。&lt;strong&gt;应用程序是面向虚拟内存编写的&lt;/strong&gt;，而不再是面向物理内存编写的；应用程序在运行时只能使用虚拟地址，CPU负责将虚拟地址翻译成物理地址，操作系统负责设置虚拟地址与物理地址之间的映射。操作系统仅将应用程序实际使用的虚拟地址映射到物理地址，从而提高内存资源的利用率；每个应用程序只能看到自己的虚拟地址空间。从而保证不同应用程序所用内存之间的隔离：每个应用程序的虚拟地址空间是统一的、连续的，从而降低了编程的复杂性。&lt;/p&gt;
&lt;h1 id=&#34;2-物理地址和虚拟地址&#34;&gt;2 物理地址和虚拟地址&lt;/h1&gt;
&lt;p&gt;​		逻辑上，可以把物理内存看成一个大数组，其中每个字节都可以通过与之唯—对应的地址进行访问，这个地址就是&lt;strong&gt;物理地址&lt;/strong&gt;（physical address）。在应用程序或操作系统运行过程中，CPU通过总线发送访问物理地址的请求，从内存中读取数据或者向其中写人数据。&lt;/p&gt;
&lt;p&gt;​		在引人虚拟内存的抽象后应用程序使用&lt;strong&gt;虚拟地址&lt;/strong&gt;（virtual address）访问存储在内存中的数据和代码。在程序扶行过程中，CPU会把虚拟地址转换成物理地址，然后通过后者访问物理内存。虚拟地址转换成物理地址的过程，通常被称为&lt;strong&gt;地址翻译&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;21-使用虚拟地址访问内存单元&#34;&gt;2.1 使用虚拟地址访问内存单元&lt;/h2&gt;
&lt;p&gt;​		CPU中的重要部件，&lt;strong&gt;内存管理单元&lt;/strong&gt;（Memory Management Unit，&lt;strong&gt;MMU&lt;/strong&gt;），负责虚拟地址到物理地址的转换。程序在CPU核心上运行期间，它使用的虚拟地址都会由 MMU 进行翻译。当需要访问物理内存设备的时候，MMU 翻译出的物理地址将会通过总线传到相应的物理内存设备，从而完成相应的物理内存读写请求。&lt;/p&gt;
&lt;p&gt;​		以运行Hello World 程序的第—条指令为例：操作系统首先把程序从磁盘／SSD 加载到物理内存中，然后让CPU去执行程序的第—条指令，但是此时该指令存在于内存中。在使用虚拟内存的情况下，CPU取指令时发出的是指令的虚拟地址，该虚拟地址被 MMU翻译为对应的物理地址，包含该物理地址的内存读请求被发送到物理内存设备，然后物理内存设备把该物理地址对应的内容（即Hello World程序的第一条指令）发送给 CPU。&lt;/p&gt;
&lt;p&gt;​		为了加速地址翻译的过程，现代CPU都引人了转址旁路缓存（Translation Lookaside Buffer，TLB）。TLB是属于MMU内部的单元。&lt;/p&gt;
&lt;h2 id=&#34;22-分段和分页机制&#34;&gt;2.2 分段和分页机制&lt;/h2&gt;
&lt;p&gt;​		MMU将虚拟地址翻译为物理地址的主要机制有两种：分段机制和分页机制。&lt;/p&gt;
&lt;p&gt;​		在分段机制下，不仅虚拟内存空间被划分成不同的段，物理内存也以段为单位进行分配。在虚拟地址空间中，相邻的段所对应的物理内存中的段可以不相邻，因此，操作系统能够实现物理内存资源的离散分配。分段容易导致外部碎片。例如：如果一共有 6GB 的物理内存，目前被划分成4 段进行分配，第—段为0～2GB，第二段为2～3GB，第三段为3～5GB，第四段为 5～6GB；如果第二段和第四段被释放，然后又需要分配—个2GB的段，虽然此时空闲的物理内存总量为2GB，但因为这2GB内存不连续，因此分配还是会失败。&lt;/p&gt;
&lt;p&gt;​		应用程序的虚拟地址空间由若干个&lt;strong&gt;不同大小的段&lt;/strong&gt;组成，比如代码段、数据段等。当 CPU访问虚拟地址空间中某一个段的时候，MMU 会通过查询&lt;strong&gt;段表&lt;/strong&gt;得到该段对应的物理内存区域。具体来说，虚拟地址由两部分构成：第—个部分表示段号，标识着该虚拟地址属于整个虚拟地址空间中的哪—个段；第二个部分表示段内地址，或称段内偏移，即相对于该段起始地址的偏移量。&lt;/p&gt;
&lt;p&gt;​		现代操作系统广泛采用的是分页机制。分页机制将应用程序的虚拟地址空间划分成&lt;strong&gt;连续的、等长的虚拟页&lt;/strong&gt;，不同于分段机制下大小不同的段。虚拟页和物理页的页长固定且相等。&lt;/p&gt;
&lt;p&gt;​		在分页机制下，应用程序虚拟地址空间中的任意虚拟页可以被映射到物理内存中的任意物理页上。因此操作系统也能实现物理内存资源的离散分配。分页机制按照固定页大小分配物理内存，使得物理内存资源易于管理可有效避免分段机制中外部碎片的问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://ydsungan.com/post/memory_1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;memory&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;23-虚拟内存的功能&#34;&gt;2.3 虚拟内存的功能&lt;/h2&gt;
&lt;p&gt;​		&lt;strong&gt;共享内存&lt;/strong&gt; (shared memory) 允许同—个物理页在不同的应用程序间共享，例如，应用程序 A 的虚拟页 V1 被映射到物理页P，若应用程序B的虚拟页 V2 也被映射到物理页P，则物理页 P 是应用程序 A 和应用程序 B 的共享内存。应用程序 A 读取虚拟页 V1 和应用程序 B 读取虚拟页 V2 将得到相同的内容，互相也能看到对方修改的内容。共享内存的一个基本用途是可以让不同的应用程序之间互相通信、传递数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://ydsungan.com/post/memory_2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;memory2&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
</description>
        </item>
        <item>
        <title>页缓存与直接IO</title>
        <link>http://ydsungan.com/p/%E9%A1%B5%E7%BC%93%E5%AD%98%E4%B8%8E%E7%9B%B4%E6%8E%A5io/</link>
        <pubDate>Wed, 30 Mar 2022 14:30:12 +0800</pubDate>
        
        <guid>http://ydsungan.com/p/%E9%A1%B5%E7%BC%93%E5%AD%98%E4%B8%8E%E7%9B%B4%E6%8E%A5io/</guid>
        <description>&lt;p&gt;​		对文件系统中结构的修改都是直接在存储设备中进行的。然而在存储设备上直接访问数据有两个问题。首先，目前大多数存储设备都是块接口，读写粒度为—个块，大小通常为 512B 或者 4KB。然而文件系统所进行的更改往往并非对齐到块的边界，其读写的字节数也并非恰好为块大小的整数倍。其次，存储设备的访问速度慢，与内存相比要慢几个数量级。大量频繁的存储设备访问操作会成为应用程序的性能瓶颈。&lt;/p&gt;
&lt;h2 id=&#34;1-访问粒度不一致问题和一些优化&#34;&gt;1 访问粒度不一致问题和一些优化&lt;/h2&gt;
&lt;p&gt;​		文件系统使用内存作为中转来解决访问粒度不—致的问题。假设一个存储设备的块大小为 4KB。当文件系统需要修改存储设备中的 8B 时，其需要先从存储设备中找到这8个字节所在的块号。通过块号，文件系统将整个块中的数据读入一个 4KB 大小的内存页之中。文件系统在内存页中修改这8个字节，并将修改后的内存页通过驱动写回到存储设备之中。这实际上是一个“读取—修改—写回”的过程。&lt;/p&gt;
&lt;p&gt;​		其中一个明显的问题是，若每个文件请求中每个结构的修改都经过完整的 “&lt;strong&gt;读取-修改-写回&lt;/strong&gt;” 过程，将会产生大量的磁盘访问。有一些比较简单的优化可以避免一些不必要的磁盘访问。&lt;/p&gt;
&lt;p&gt;​		之所以要在修改和写回之前先读取，是因为我们只想修改存储块下的一部分，而写回操作会覆盖整个存储块。为了保证此存储块中其他部分的数据不变，我们需要先将这些数据读出来，之后随修改后的数据一同写回到存储设备中。但是，如果一次修改的数据量刚好覆盖了整个存储块，那么就不用进行读取操作，可以直接将修改后的4096个字节写回到存储设备中。&lt;/p&gt;
&lt;p&gt;​		此外，如果一个文件请求中的多次修改均是在同—个存储块中，那么可以将多次修改合并到一个 “&lt;strong&gt;读取-修改-写回&lt;/strong&gt;” 的过程中，即变为 “&lt;strong&gt;读取-修改1-修改2-修改3-…修改n-写回&lt;/strong&gt;” 。这样，同样访问了两次存储设备，却完成了多次修改。&lt;/p&gt;
&lt;h2 id=&#34;2-读缓存&#34;&gt;2 读缓存&lt;/h2&gt;
&lt;p&gt;​		文件的访问具有时间局部性：当文件的一部分被访问后，有较高的概率其会再次被使用。因此，当文件系统从设备中读取了某个文件的数据之后，可以让这些数据继续保留在内存中一段时间。这样，当应用程序需要再次读取这些数据时，就可以从此前保留在内存中的数据中读取，从而避免了存储设备的访问。这便是文件系统中的读缓存。&lt;/p&gt;
&lt;p&gt;​		读缓存是需要占用内存空间的。为了防止该缓存占用过多的内存，澡作系统会对读缓存的大小进行限制。当读缓存占用过多内存时，使用 LRU 等策略回收读缓存占用的内存。&lt;/p&gt;
&lt;h2 id=&#34;3-写缓冲区和写合并&#34;&gt;3 写缓冲区和写合并&lt;/h2&gt;
&lt;p&gt;​		一般默认一个写请求结束之后，所有的写入数据均已被持久化到存储设备上，也就是说在文件写入请求完成后立刻发生断电和崩溃等情况，在系统恢复后，刚刚写入的文件数据依然能够被读取到。这是一个较强但十分合理的保证。然而由于存储设备的性能较差，若每个写请求均等待写入设备完成，文件写操作的延时变长，吞吐量会严重下降，从而影响整个系统的性能。&lt;/p&gt;
&lt;p&gt;​		为了获得更好的性能，在文件系统的设计中有一个权衡：在—个文件写请求返回到应用程序之后，允许其修改的数据暂时不持久化到存储设备中。这个权衡允许文件系统暂时将修改的数据保存在内存中，并在后台慢慢地持久化到存储设备上，然而这样却牺牲了—定的可靠性。在前面的例子中，如果在文件写请求完成后立刻发生断电，再次开机之后，刚刚完成写入的数据可能会丢失。为了确保数据被持久化到设备中，POSIX 中规定了 &lt;strong&gt;fsync&lt;/strong&gt; 接口，用于保证某个已打开文件的所有修改全部被持久化到存储设备中。&lt;/p&gt;
&lt;p&gt;​		当文件系统修改完文件数据后，其修改会被暂存在写缓冲区的内存页之中。如果后续的文件请求需要读取或者修改相同存储块中的数据，文件系统可以直接在写缓冲区对应的内存页上进行读取或者修改。当可用内存不足，或者对应的 &lt;strong&gt;fsync&lt;/strong&gt; 被调用时，写缓冲区内存页中的数据才写回到存储设备对应的存储块之中。这样，一段时间内同一个存储块上的多个写请求可以合并一个磁盘写操作。&lt;/p&gt;
&lt;h2 id=&#34;4-页缓存&#34;&gt;4 页缓存&lt;/h2&gt;
&lt;p&gt;​		在Linux内核中，读缓存与写缓冲区的功能被合并起来管理，称为页缓存。页缓存以内存页为单位，将存储设备中的存储位置映射到内存中。文件系统通过调用 VFS 提供的相应接口对页缓存进行操作。&lt;/p&gt;
&lt;p&gt;​		当—个文件被读取时，文件系统会先检查其内容是否已经保存在页缓存中。如果文件数据已保存在页缓存中，则文件系统直接从页缓存中读取数据返回给应用程序；否则，文件系统会在页缓存中创建新的内存页，并从存储设备中读取相关的数据然后将其保存在创建的内存页中。之后，文件系统从内存页中读取相应的数据，返回给应用程序。&lt;/p&gt;
&lt;p&gt;​		在进行文件修改时，文件系统同样会首先检查页缓存。如果要修改的数据已经在页缓存中，文件系统可以直接修改页缓存中的数据，并将该页标记为脏页；若不在页缓存中，文件系统同样先创建页缓存并从存储没备中读取数据，然后在页缓存中进行修改并标记该页为脏页。标记为脏页的缓存会由文件系统定期写回到存储设备中。当操作系统内存不足或者应用程序调用 &lt;strong&gt;fsync&lt;/strong&gt; 时，文件系统也会将脏页中的数据写回到存储设备中。&lt;/p&gt;
&lt;h2 id=&#34;5-直接io&#34;&gt;5 直接IO&lt;/h2&gt;
&lt;p&gt;​		&lt;strong&gt;直接IO&lt;/strong&gt;就是不需要读缓冲，不需要写缓冲区和写合并。&lt;/p&gt;
&lt;p&gt;​		页缓存是持久化和性能之间权衡的产物。在大多数情况下，页缓存能够显著地提升文件系统性能。然而并非在所有情况下页缓存都能起到正面作用。一方面，部分应用对数据持久化有较强的要求，不希望文件的修改内容缓存在页缓存中。如果使用页缓存的机制，这些应用需要在每次修改文件后立即执行 &lt;strong&gt;fsync&lt;/strong&gt; 操作进行同步，这会影响应用程序的性能。另一方面，一些应用程序（如数据库等）会自己实现缓存机制对数据进行缓存和管理。由于应用程序更加了解自己对数据的需求,在这种情况下，操作系统提供的页缓存机制是冗余的，且一般会带来额外的性能开销。&lt;/p&gt;
&lt;p&gt;​		因此，文件系统将是否使用页缓存的判断和选择权交给了应用程序。应用程序可以在打开文件时通过附带 &lt;strong&gt;O_DIRECT&lt;/strong&gt; 标志，提示文件系统不要使用页缓存。这种文件访问方式就是&lt;strong&gt;直接 I/O&lt;/strong&gt; 。而相对应地，使用页缓存的文件请求称为缓存I/O。&lt;/p&gt;
&lt;h2 id=&#34;6-内存映射&#34;&gt;6 内存映射&lt;/h2&gt;
&lt;p&gt;​		除了文件的 read 和 write 接口外，应用程序还可以通过内存映射机制，以访问内存的形式访问文件内容。Linux在其页缓存的基础上实现了文件的内存映射机制。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>使用Hugo平台搭建个人博客</title>
        <link>http://ydsungan.com/p/%E4%BD%BF%E7%94%A8hugo%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
        <pubDate>Tue, 22 Mar 2022 12:44:12 +0800</pubDate>
        
        <guid>http://ydsungan.com/p/%E4%BD%BF%E7%94%A8hugo%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
        <description>&lt;h1 id=&#34;1-windows-10-安装-hugo&#34;&gt;1 Windows 10 安装 Hugo&lt;/h1&gt;
&lt;h2 id=&#34;11-安装-chocolatey-包管理器&#34;&gt;1.1 安装 Chocolatey 包管理器&lt;/h2&gt;
&lt;p&gt;windows 上需要使用 Chocolatey 作为包管理器，在安装 Hugo 之前需要在windows上安装 Chocolatey，以管理员方式运行PowerShell，输入以下指令自动安装 Chocolatey：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Set-ExecutionPolicy&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Bypass&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Scope&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;Process&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Force&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;[System.Net.ServicePointManager]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SecurityProtocol&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;[System.Net.ServicePointManager]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SecurityProtocol&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-bor&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;3072&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;iex &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;New-Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Net&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WebClient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DownloadString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;https://chocolatey.org/install.ps1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;输入命令 “choco” 来检查安装是否成功。&lt;/p&gt;
&lt;h2 id=&#34;12-安装-hugo&#34;&gt;1.2 安装 Hugo&lt;/h2&gt;
&lt;p&gt;接下来，输入以下命令来安装 Hugo：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;choco&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;hugo-extended&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-confirm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;输入命令 “hugo help” 来检查安装是否成功。&lt;/p&gt;
&lt;h1 id=&#34;2-搭建项目&#34;&gt;2 搭建项目&lt;/h1&gt;
&lt;h2 id=&#34;21-建立项目&#34;&gt;2.1 建立项目&lt;/h2&gt;
&lt;p&gt;在 windows 的用户家目录下（C:\Users\username）输入以下命令（其中ydsungan为项目的名称）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;hugo&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;site&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ydsungan&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;22-下载主题&#34;&gt;2.2 下载主题&lt;/h2&gt;
&lt;p&gt;在【https://themes.gohugo.io/】网站选择一个主题，进入主题的 Github 页面，拷贝地址，进入项目的themes目录，克隆该主题：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cd themes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone https://github.com/CaiJimmy/hugo-theme-stack.git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;23-配置主题&#34;&gt;2.3 配置主题&lt;/h2&gt;
&lt;p&gt;在themes目录里有下载好的hugo-theme-stack文件夹，该文件夹里面的 exampleSite/config.ymal 就是配置文件，需要把该配置文件复制到项目的根目录下，直接覆盖根目录下的原有的配置文件（config.ymal 或者config.toml）。&lt;/p&gt;
&lt;p&gt;如果根目录下有 config.toml 而没有 config.ymal 文件，那么把 config.toml 直接删除即可，把 exampleSite/config.ymal 直接黏贴在项目的根目录下。&lt;/p&gt;
&lt;h2 id=&#34;24-添加内容&#34;&gt;2.4 添加内容&lt;/h2&gt;
&lt;p&gt;项目根目录下执行 &lt;em&gt;hugo new about.md&lt;/em&gt; ，会在根目录下的 content 目录下生成一个about.md文件。该文件的默认内容为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;title: &amp;#34;About&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;date: 2018-05-22T22:04:26+08:00
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;draft: true
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;draft：表示该文章是否为草稿，true表示为草稿状态，草稿状态下是对外不可见的，提交后需要改为true；&lt;/p&gt;
&lt;p&gt;不过一般的博客文章都是放在根目录下的 &lt;em&gt;/content/post/&lt;/em&gt; 目录下的，执行 &lt;em&gt;hugo new post/test.md&lt;/em&gt; 会创建一个test.md。&lt;/p&gt;
&lt;h2 id=&#34;25-启动hugo自带的服务器&#34;&gt;2.5 启动Hugo自带的服务器&lt;/h2&gt;
&lt;p&gt;使用以下命令即可启动一个Hugo服务器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; hugo server  --theme=hugo-theme-stack
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;启动后在浏览器输入 &lt;em&gt;http://127.0.0.1:1313&lt;/em&gt; 即可。&lt;/p&gt;
&lt;h2 id=&#34;26-生成静态网页&#34;&gt;2.6 生成静态网页&lt;/h2&gt;
&lt;p&gt;使用以下命令即可在根目录下的/public/里面生成静态的HTML&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hugo --theme=hugo-theme-stack --baseUrl=&amp;#34;http://ydsungan.com&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;27-上传-github-保存&#34;&gt;2.7 上传 Github 保存&lt;/h2&gt;
&lt;p&gt;在 Github 上新建一个仓库，把整个项目上传即可。然后在自己的服务器上拉取该项目即可。&lt;/p&gt;
&lt;h2 id=&#34;28-配置自己服务器上的-nginx&#34;&gt;2.8 配置自己服务器上的 Nginx&lt;/h2&gt;
&lt;p&gt;在自己的服务器上的 Nginx 的 conf/nginx.conf 文件里面配置如下即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;location / {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            root   /usr/local/ydsungan_hugo/public;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            index  index.html index.htm;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;ydsungan_hugo 就是从 Github 拉取的项目，而静态HTML就生成在 public/ 目录下；输入命令 &lt;em&gt;./sbin/nginx -s reload&lt;/em&gt; 重启 nginx 即可。现在可以在浏览器访问自己的服务器了。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
